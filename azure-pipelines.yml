# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'VS2017-Win2016'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  NEXTVERSION: 1.3.7
  WRONGKEY: key

steps:
- task: NuGetToolInstaller@0

- task: Npm@1
  inputs:
    command: 'custom'
    customCommand: 'install -D @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/exec'

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: NuGetCommand@2
  inputs:
    command: pack
    packagesToPack: '**/*.csproj'
    versionEnvVar: NEXTVERSION
    versioningScheme: byEnvVar

- task: NodeTool@0
  inputs:
      versionSpec: '10.15.3'
  displayName: use node 10.15.3

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: 'Tree /f $Env:BUILD_ARTIFACTSTAGINGDIRECTORY'

# Use the environment variables input below to pass secret variables to this script.'

- script: npx semantic-release
  env:
    GH_TOKEN: $(GH_TOKEN)
    NUGET_TOKEN: $(NUGET_TOKEN)
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['EnableSemanticRelease'], 'true'))

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: 'Write-Host "nuget $env:NEXTVERSION $env:GitVersion_NuGetVersion majorminorpatch $env:GitVersion_MajorMinorPatch civersion $env:CI_Version"'

- task: NuGetCommand@2
  inputs:
    command: 'restore'

#- task: GitVersion@4
#  inputs:
#    updateAssemblyInfo: true

#- task: PowerShell@2
#  inputs:
#    targetType: 'inline'
#    script: '# Write your powershell commands here.
#$UtcDateTime = (Get-Date).ToUniversalTime()
#$FormattedDateTime = (Get-Date -Date $UtcDateTime -Format "yyyyMMdd-HHmmss")
#$CI_Version = "$env:GitVersion_NuGetVersion-ci-$FormattedDateTime"
#Write-Host ("##vso[task.setvariable variable=CI_Version;]$CI_Version")"
# Use the environment variables input below to pass secret variables to this script.'


#- task: NuGetCommand@2
#  inputs:
#    command: push
#    nuGetFeedType: external
#    publishFeedCredentials: 'connection'
#    versioningScheme: byEnvVar
#    versionEnvVar: GitVersion_NuGetVersion

